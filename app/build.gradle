apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs'

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'sandip.example.com.testing.OpenClass'
}


android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "sandip.example.com.databinding"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode 1
        versionName "1.0"
        dataBinding.enabled = true
        androidExtensions {
            experimental = true
        }
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner "sandip.example.com.databinding.utils.AppTestRunner"

        testOptions {
            unitTests.returnDefaultValues = true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation":
                                     "$projectDir/schemas".toString()]
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

jacoco {
    toolVersion = "0.7.4+"
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation deps.room.runtime

    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    implementation deps.lifecycle.java8

    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson

    implementation deps.kotlin.stdlib

    implementation deps.dagger.runtime
    implementation deps.dagger.android
    implementation deps.dagger.android_support

    implementation deps.support.app_compat
    implementation deps.support.recyclerview
    implementation deps.support.cardview
    implementation deps.support.design
    implementation deps.support.v4
    implementation deps.support.grid_layout
    implementation deps.support.constraint_layout
    implementation deps.support.multidex
    implementation deps.support.annotations
    implementation deps.support.exif_interface

    implementation deps.gson
    implementation deps.glide
    implementation deps.navigation.fragment_ktx

    androidTestImplementation deps.navigation.testing_ktx
    kapt deps.dagger.android_support_compiler
    kapt deps.dagger.compiler
    kapt(deps.room.compiler, {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    kapt deps.lifecycle.compiler
    debugImplementation 'com.amitshekhar.android:debug-db:1.0.3'
    androidTestImplementation(deps.espresso.core, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation(deps.espresso.contrib, {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    })
    androidTestImplementation deps.support.test_runner
    androidTestImplementation deps.espresso.intents
    testImplementation deps.mockito.core
    testImplementation(deps.arch_core.testing, {
        exclude group: 'com.android.support', module: 'support-compat'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.android.support', module: 'support-core-utils'
    })
    androidTestImplementation deps.arch_core.testing
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }
    androidTestImplementation deps.mockito.core, { exclude group: 'net.bytebuddy' }

    task fullCoverageReport(type: JacocoReport) {
        dependsOn 'createDebugCoverageReport'
        dependsOn 'testDebugUnitTest'
        reports {
            xml.enabled = true
            html.enabled = true
        }

        def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*',
                          '**/*Test*.*', 'android/**/*.*',
                          '**/*_MembersInjector.class',
                          '**/Dagger*Component.class',
                          '**/Dagger*Component$Builder.class',
                          '**/*_*Factory.class',
                          '**/*ComponentImpl.class',
                          '**/*SubComponentBuilder.class']
        def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
        def mainSrc = "${project.projectDir}/src/main/java"

        sourceDirectories = files([mainSrc])
        classDirectories = files([debugTree])
        executionData = fileTree(dir: "$buildDir", includes: [
                "jacoco/testDebugUnitTest.exec",
                "outputs/code-coverage/connected/*coverage.ec"
        ])
    }
}
